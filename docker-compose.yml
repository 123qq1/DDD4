version: '3.4'

services:

  ddd4.app:
    image: ${DOCKER_REGISTRY-}ddd4app
    build:
      context: .
      dockerfile: DDD4.App/Dockerfile

  ddd4.customer.api:
    image: ${DOCKER_REGISTRY-}ddd4customerapi
    build:
      context: .
      dockerfile: DDD4.Customer.Api/Dockerfile

  ddd4.saga.api:
    image: ${DOCKER_REGISTRY-}ddd4sagaapi
    build:  
      context: .
      dockerfile: DDD4.Saga.Api/Dockerfile
    ports:
     - "80:80"
     - "443:443"
    depends_on: 
     - ddd4.saga.db
     - rabbitmq 

  ddd4.discord.api:
    image: ${DOCKER_REGISTRY-}ddd4discordapi
    stdin_open: true
    tty: true
    container_name: DDD4.Discord.Api
    build:
      context: .
      dockerfile: DDD4.Discord.Api/Dockerfile
    depends_on: 
     - rabbitmq 
     - ddd4.saga.api 

  ddd4.saga.db:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    user: root
    ports:
     - "11433:1433"
    environment:
        MSSQL_SA_PASSWORD: "ddd4.saga.db"
        ACCEPT_EULA: "Y" 

    volumes:
      - C:\DockerVolumes\sagaSqlserver\data:/var/opt/mssql/data
      - C:\DockerVolumes\sagaSqlserver\log:/var/opt/mssql/log
      - C:\DockerVolumes\sagaSqlserver\secrets:/var/opt/mssql/secrets 

    container_name: DDD4.Saga.DB

  ddd4.app.db:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    user: root
    ports:
     - "21433:1433"
    environment:
        MSSQL_SA_PASSWORD: "ddd4.app.db"
        ACCEPT_EULA: "Y" 

    volumes:
      - C:\DockerVolumes\appSqlserver\data:/var/opt/mssql/data
      - C:\DockerVolumes\appSqlserver\log:/var/opt/mssql/log
      - C:\DockerVolumes\appSqlserver\secrets:/var/opt/mssql/secrets 

    container_name: DDD4.App.DB

  ddd4.customer.es:
    image: eventstore/eventstore:latest
    container_name: DDD4.Customer.ES
    environment:
      - EVENTSTORE_INSECURE=true # let eventstore run without ceritficate
      - EVENTSTORE_EXT_TCP_PORT=11130 # set internal tcp port
      - EVENTSTORE_HTTP_PORT=21130 # set internal admin ui port
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "11130:11130" # map internal tcp port
      - "21130:21130" # map internal admin ui port
    volumes:
      - C:\DockerVolumes\customerESserver\lib:/var/lib/eventstore
      - C:\DockerVolumes\customerESserver\log:/var/log/eventstore


  rabbitmq:
    container_name: DDD4.RabbitMQ
    hostname: rabbit
    image: masstransit/rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
  
  ddd4.customer.mongo:
    image: mongo:latest
    container_name: DDD4.Customer.MongoDb
    restart: always
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports: 
      - 27017:27017
    volumes:
      - C:\DockerVolumes\customerMongoserver\lib:/var/lib/mongo

  ddd4.customer.mongo-express:
    image: mongo-express:latest
    container_name: DDD4.Customer.Mongo-Express
    restart: always
    ports:
     - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: DDD4.Customer.MongoDb #Name of the container you want express on. 
      